openapi: 3.0.3
info:
  title: Library API
  version: "1.0.0"
  description: Quản lý sách, thành viên và mượn – trả (v1, envelope responses)
servers:
  - url: http://127.0.0.1:5000/api/v1

tags:
  - name: Health
  - name: Books
  - name: Members
  - name: Loans

paths:
  /health-check:
    get:
      summary: Kiểm tra tình trạng dịch vụ
      tags: [Health]
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              description: "public, max-age=15"
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeHealth" }

  /books:
    get:
      summary: Danh sách sách (có phân trang, lọc, sắp xếp)
      tags: [Books]
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/SortBook"
        - $ref: "#/components/parameters/Order"
        - $ref: "#/components/parameters/Q"
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              description: "public, max-age=30"
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeBooks" }
    post:
      summary: Tạo sách
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BookCreate" }
      responses:
        "201":
          description: Đã tạo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeBook" }
        "400": { $ref: "#/components/responses/BadRequest" }

  /books/{book_id}:
    get:
      summary: Chi tiết sách
      tags: [Books]
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              description: "public, max-age=60"
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeBook" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      summary: Cập nhật sách
      tags: [Books]
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BookCreate" }
      responses:
        "200":
          description: Đã cập nhật
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeBook" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      summary: Xoá sách
      tags: [Books]
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "204":
          description: No Content
        "404": { $ref: "#/components/responses/NotFound" }

  /members:
    get:
      summary: Danh sách thành viên (có phân trang, lọc, sắp xếp)
      tags: [Members]
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/SortMember"
        - $ref: "#/components/parameters/Order"
        - $ref: "#/components/parameters/Q"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeMembers" }
    post:
      summary: Tạo thành viên
      tags: [Members]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MemberCreate" }
      responses:
        "201":
          description: Đã tạo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeMember" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "409": { $ref: "#/components/responses/Conflict" }

  /members/{member_id}:
    get:
      summary: Chi tiết thành viên
      tags: [Members]
      parameters:
        - $ref: "#/components/parameters/MemberId"
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              description: "public, max-age=60"
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeMember" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      summary: Cập nhật thành viên
      tags: [Members]
      parameters:
        - $ref: "#/components/parameters/MemberId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MemberCreate" }
      responses:
        "200":
          description: Đã cập nhật
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeMember" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "409": { $ref: "#/components/responses/Conflict" }
    delete:
      summary: Xoá thành viên
      tags: [Members]
      parameters:
        - $ref: "#/components/parameters/MemberId"
      responses:
        "204":
          description: No Content
        "404": { $ref: "#/components/responses/NotFound" }

  /members/{member_id}/loans:
    get:
      summary: Loans của 1 thành viên
      tags: [Members]
      parameters:
        - $ref: "#/components/parameters/MemberId"
        - $ref: "#/components/parameters/LoanStatusAll"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeLoans" }
        "404": { $ref: "#/components/responses/NotFound" }

  /loans:
    get:
      summary: Danh sách loans (lọc theo trạng thái)
      tags: [Loans]
      parameters:
        - $ref: "#/components/parameters/LoanStatus"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/SortLoan"
        - $ref: "#/components/parameters/Order"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeLoans" }
    post:
      summary: Mượn sách (tạo loan)
      tags: [Loans]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BorrowRequest" }
      responses:
        "201":
          description: Phiếu mượn đã tạo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeLoan" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }

  /loans/{loan_id}:
    patch:
      summary: Trả sách (đánh dấu returned_at)
      tags: [Loans]
      parameters:
        - $ref: "#/components/parameters/LoanId"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                returned:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Trả thành công
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EnvelopeLoan" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }

components:
  parameters:
    BookId:
      in: path
      name: book_id
      required: true
      schema: { type: integer }
    MemberId:
      in: path
      name: member_id
      required: true
      schema: { type: integer }
    LoanId:
      in: path
      name: loan_id
      required: true
      schema: { type: integer }
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    PerPage:
      in: query
      name: per_page
      schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
    Order:
      in: query
      name: order
      schema: { type: string, enum: [asc, desc], default: desc }
    Q:
      in: query
      name: q
      description: Tìm kiếm theo tiêu đề/tác giả (books) hoặc tên/email (members)
      schema: { type: string }
    SortBook:
      in: query
      name: sort
      schema:
        type: string
        enum: [id, title, author, stock, created_at, updated_at]
        default: id
    SortMember:
      in: query
      name: sort
      schema:
        type: string
        enum: [id, name, email, created_at]
        default: id
    SortLoan:
      in: query
      name: sort
      schema:
        type: string
        enum: [id, borrowed_at, due_at, returned_at]
        default: id
    LoanStatus:
      in: query
      name: status
      schema: { type: string, enum: [active, returned], default: active }
      description: Lọc loan theo trạng thái
    LoanStatusAll:
      in: query
      name: status
      schema: { type: string, enum: [active, returned, all], default: active }
      description: Lọc loan theo trạng thái (bao gồm all)

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: "#/components/schemas/EnvelopeError" }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/EnvelopeError" }
    Conflict:
      description: Conflict
      content:
        application/json:
          schema: { $ref: "#/components/schemas/EnvelopeError" }

  schemas:
    # ---- Envelope primitives ----
    Meta:
      type: object
      properties:
        page: { type: integer, example: 1 }
        per_page: { type: integer, example: 10 }
        total: { type: integer, example: 42 }
        pages: { type: integer, example: 5 }
        status: { type: string, example: "active" }
        count: { type: integer, example: 3 }

    EnvelopeBase:
      type: object
      properties:
        status: { type: string, example: "success" }
        data: {}
        meta: { $ref: "#/components/schemas/Meta" }
        error:
          type: object
          nullable: true
          properties:
            message: { type: string, example: "Not found" }

    EnvelopeError:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      example:
        status: error
        data: null
        meta: {}
        error:
          message: "Not found"

    # ---- Domain models ----
    Book:
      type: object
      properties:
        id: { type: integer, example: 1 }
        title: { type: string, example: "Clean Code" }
        author: { type: string, example: "Robert C. Martin" }
        stock: { type: integer, example: 3 }
        created_at: { type: string, format: date-time, example: "2025-10-20T10:12:00Z" }
        updated_at: { type: string, format: date-time, example: "2025-10-20T10:12:00Z" }
    BookCreate:
      type: object
      required: [title, author, stock]
      properties:
        title: { type: string }
        author: { type: string }
        stock: { type: integer, minimum: 0 }

    Member:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Nguyen Van Hung" }
        email: { type: string, example: "hung@example.com" }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    MemberCreate:
      type: object
      required: [name, email]
      properties:
        name: { type: string }
        email: { type: string, format: email }

    Loan:
      type: object
      properties:
        id: { type: integer, example: 12 }
        book_id: { type: integer, example: 3 }
        member_id: { type: integer, example: 1 }
        borrowed_at: { type: string, format: date-time, example: "2025-09-30T10:12:00Z" }
        due_at: { type: string, format: date-time, example: "2025-10-14T10:12:00Z" }
        returned_at: { type: string, format: date-time, nullable: true, example: null }
    LoanExpanded:
      type: object
      properties:
        id: { type: integer, example: 12 }
        book_id: { type: integer, example: 3 }
        book_title: { type: string, example: "Clean Code" }
        member_id: { type: integer, example: 1 }
        member_name: { type: string, example: "Nguyen Van Hung" }
        borrowed_at: { type: string, format: date-time }
        due_at: { type: string, format: date-time }
        returned_at: { type: string, format: date-time, nullable: true }

    BorrowRequest:
      type: object
      required: [book_id, member_id]
      properties:
        book_id: { type: integer, example: 1 }
        member_id: { type: integer, example: 1 }
        days: { type: integer, example: 14, minimum: 1 }

    # ---- Envelopes with data ----
    EnvelopeHealth:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      properties:
        data:
          type: object
          properties:
            service: { type: string, example: "library-api" }
            time: { type: string, format: date-time }

    EnvelopeBook:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      properties:
        data:
          $ref: "#/components/schemas/Book"

    EnvelopeBooks:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Book" }

    EnvelopeMember:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      properties:
        data:
          $ref: "#/components/schemas/Member"

    EnvelopeMembers:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Member" }

    EnvelopeLoan:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      properties:
        data:
          $ref: "#/components/schemas/Loan"

    EnvelopeLoans:
      allOf:
        - $ref: "#/components/schemas/EnvelopeBase"
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/LoanExpanded" }
